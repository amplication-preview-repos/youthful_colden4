/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Thread as PrismaThread,
  Email as PrismaEmail,
} from "@prisma/client";

export class ThreadServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ThreadCountArgs, "select">): Promise<number> {
    return this.prisma.thread.count(args);
  }

  async threads<T extends Prisma.ThreadFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ThreadFindManyArgs>
  ): Promise<PrismaThread[]> {
    return this.prisma.thread.findMany<Prisma.ThreadFindManyArgs>(args);
  }
  async thread<T extends Prisma.ThreadFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ThreadFindUniqueArgs>
  ): Promise<PrismaThread | null> {
    return this.prisma.thread.findUnique(args);
  }
  async createThread<T extends Prisma.ThreadCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ThreadCreateArgs>
  ): Promise<PrismaThread> {
    return this.prisma.thread.create<T>(args);
  }
  async updateThread<T extends Prisma.ThreadUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ThreadUpdateArgs>
  ): Promise<PrismaThread> {
    return this.prisma.thread.update<T>(args);
  }
  async deleteThread<T extends Prisma.ThreadDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ThreadDeleteArgs>
  ): Promise<PrismaThread> {
    return this.prisma.thread.delete(args);
  }

  async findEmails(
    parentId: string,
    args: Prisma.EmailFindManyArgs
  ): Promise<PrismaEmail[]> {
    return this.prisma.thread
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .emails(args);
  }
}
