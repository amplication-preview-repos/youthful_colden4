/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ThreadService } from "../thread.service";
import { ThreadCreateInput } from "./ThreadCreateInput";
import { Thread } from "./Thread";
import { ThreadFindManyArgs } from "./ThreadFindManyArgs";
import { ThreadWhereUniqueInput } from "./ThreadWhereUniqueInput";
import { ThreadUpdateInput } from "./ThreadUpdateInput";
import { EmailFindManyArgs } from "../../email/base/EmailFindManyArgs";
import { Email } from "../../email/base/Email";
import { EmailWhereUniqueInput } from "../../email/base/EmailWhereUniqueInput";

export class ThreadControllerBase {
  constructor(protected readonly service: ThreadService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Thread })
  async createThread(@common.Body() data: ThreadCreateInput): Promise<Thread> {
    return await this.service.createThread({
      data: data,
      select: {
        createdAt: true,
        id: true,
        messages: true,
        participants: true,
        subject: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Thread] })
  @ApiNestedQuery(ThreadFindManyArgs)
  async threads(@common.Req() request: Request): Promise<Thread[]> {
    const args = plainToClass(ThreadFindManyArgs, request.query);
    return this.service.threads({
      ...args,
      select: {
        createdAt: true,
        id: true,
        messages: true,
        participants: true,
        subject: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Thread })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async thread(
    @common.Param() params: ThreadWhereUniqueInput
  ): Promise<Thread | null> {
    const result = await this.service.thread({
      where: params,
      select: {
        createdAt: true,
        id: true,
        messages: true,
        participants: true,
        subject: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Thread })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateThread(
    @common.Param() params: ThreadWhereUniqueInput,
    @common.Body() data: ThreadUpdateInput
  ): Promise<Thread | null> {
    try {
      return await this.service.updateThread({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          messages: true,
          participants: true,
          subject: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Thread })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteThread(
    @common.Param() params: ThreadWhereUniqueInput
  ): Promise<Thread | null> {
    try {
      return await this.service.deleteThread({
        where: params,
        select: {
          createdAt: true,
          id: true,
          messages: true,
          participants: true,
          subject: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/emails")
  @ApiNestedQuery(EmailFindManyArgs)
  async findEmails(
    @common.Req() request: Request,
    @common.Param() params: ThreadWhereUniqueInput
  ): Promise<Email[]> {
    const query = plainToClass(EmailFindManyArgs, request.query);
    const results = await this.service.findEmails(params.id, {
      ...query,
      select: {
        body: true,
        createdAt: true,
        id: true,
        recipients: true,
        sender: true,
        subject: true,

        thread: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/emails")
  async connectEmails(
    @common.Param() params: ThreadWhereUniqueInput,
    @common.Body() body: EmailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      emails: {
        connect: body,
      },
    };
    await this.service.updateThread({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/emails")
  async updateEmails(
    @common.Param() params: ThreadWhereUniqueInput,
    @common.Body() body: EmailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      emails: {
        set: body,
      },
    };
    await this.service.updateThread({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/emails")
  async disconnectEmails(
    @common.Param() params: ThreadWhereUniqueInput,
    @common.Body() body: EmailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      emails: {
        disconnect: body,
      },
    };
    await this.service.updateThread({
      where: params,
      data,
      select: { id: true },
    });
  }
}
