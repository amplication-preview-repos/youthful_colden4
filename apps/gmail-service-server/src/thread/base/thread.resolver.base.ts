/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Thread } from "./Thread";
import { ThreadCountArgs } from "./ThreadCountArgs";
import { ThreadFindManyArgs } from "./ThreadFindManyArgs";
import { ThreadFindUniqueArgs } from "./ThreadFindUniqueArgs";
import { CreateThreadArgs } from "./CreateThreadArgs";
import { UpdateThreadArgs } from "./UpdateThreadArgs";
import { DeleteThreadArgs } from "./DeleteThreadArgs";
import { EmailFindManyArgs } from "../../email/base/EmailFindManyArgs";
import { Email } from "../../email/base/Email";
import { ThreadService } from "../thread.service";
@graphql.Resolver(() => Thread)
export class ThreadResolverBase {
  constructor(protected readonly service: ThreadService) {}

  async _threadsMeta(
    @graphql.Args() args: ThreadCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Thread])
  async threads(@graphql.Args() args: ThreadFindManyArgs): Promise<Thread[]> {
    return this.service.threads(args);
  }

  @graphql.Query(() => Thread, { nullable: true })
  async thread(
    @graphql.Args() args: ThreadFindUniqueArgs
  ): Promise<Thread | null> {
    const result = await this.service.thread(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Thread)
  async createThread(@graphql.Args() args: CreateThreadArgs): Promise<Thread> {
    return await this.service.createThread({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Thread)
  async updateThread(
    @graphql.Args() args: UpdateThreadArgs
  ): Promise<Thread | null> {
    try {
      return await this.service.updateThread({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Thread)
  async deleteThread(
    @graphql.Args() args: DeleteThreadArgs
  ): Promise<Thread | null> {
    try {
      return await this.service.deleteThread(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Email], { name: "emails" })
  async findEmails(
    @graphql.Parent() parent: Thread,
    @graphql.Args() args: EmailFindManyArgs
  ): Promise<Email[]> {
    const results = await this.service.findEmails(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
